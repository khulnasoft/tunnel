// Code generated by mockery v2.52.3. DO NOT EDIT.

package post

import (
	context "context"

	types "github.com/khulnasoft/tunnel/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// MockScanner is an autogenerated mock type for the Scanner type
type MockScanner struct {
	mock.Mock
}

// Name provides a mock function with no fields
func (_m *MockScanner) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PostScan provides a mock function with given fields: ctx, results
func (_m *MockScanner) PostScan(ctx context.Context, results types.Results) (types.Results, error) {
	ret := _m.Called(ctx, results)

	if len(ret) == 0 {
		panic("no return value specified for PostScan")
	}

	var r0 types.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Results) (types.Results, error)); ok {
		return rf(ctx, results)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Results) types.Results); ok {
		r0 = rf(ctx, results)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Results)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Results) error); ok {
		r1 = rf(ctx, results)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with no fields
func (_m *MockScanner) Version() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewMockScanner creates a new instance of MockScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScanner {
	mock := &MockScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
